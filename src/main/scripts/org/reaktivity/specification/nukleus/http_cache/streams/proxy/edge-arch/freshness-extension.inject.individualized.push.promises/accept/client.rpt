#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property newProxyAcceptRef ${nukleus:newRouteRef()} # external scope
property date ${http_cache:date()}
property etag ${http_cache:strongEtag()} #shared

# Populate Cache

connect await ROUTED_PROXY
        "nukleus://http-cache/streams/source"
        option nukleus:route ${newProxyAcceptRef}
        option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${http:headers()
                              .item(":scheme", "http")
                              .item(":method", "GET")
                              .item(":path", "/path")
                              .item(":authority", "localhost:8080")
                              .item("user-agent", "client 1")
                              .build()}

connected

write close

read nukleus:begin.ext ${http:headers()
                             .item(":status", "200")
                             .item("content-length", "11")
                             .item("date", date)
                             .item("surrogate-control", "max-age=1+10")
                             .item("etag", etag)
                             .item("cache-control", "stale-while-revalidate=10")
                             .build()}

read nukleus:transfer.ext ${http:headers()
                            .item(":scheme", "http")
                            .item(":method", "GET")
                            .item(":path", "/path")
                            .item(":authority", "localhost:8080")
                            .item("user-agent", "client 1")
                            .item("cache-control", "no-cache")
                            .item("prefer", "wait=10")
                            .item("if-none-match", etag)
                            .build()}

read "hello world"

read closed

read notify REQUEST1_COMPLETE

# Poll request in response to push promise
connect await REQUEST1_COMPLETE
        "nukleus://http-cache/streams/source"
        option nukleus:route ${newProxyAcceptRef}
        option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${http:headers()
                              .item(":scheme", "http")
                              .item(":method", "GET")
                              .item(":path", "/path")
                              .item(":authority", "localhost:8080")
                              .item("user-agent", "client 1")
                              .item("cache-control", "no-cache")
                              .item("prefer", "wait=10")
                              .item("if-none-match", etag)
                              .build()}

connected

write close

## Served stale cache

connect await REVALIDATING
        "nukleus://http-cache/streams/source"
        option nukleus:route ${newProxyAcceptRef}
        option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${http:headers()
                              .item(":scheme", "http")
                              .item(":method", "GET")
                              .item(":path", "/path")
                              .item(":authority", "localhost:8080")
                              .item("user-agent", "client 2")
                              .build()}

connected

write close

read nukleus:begin.ext ${http:headers()
                             .item(":status", "200")
                             .item("content-length", "11")
                             .item("date", date)
                             .item("surrogate-control", "max-age=1+10")
                             .item("etag", etag)
                             .item("cache-control", "stale-while-revalidate=10")
                             .build()}

read nukleus:transfer.ext ${http:headers()
                            .item(":scheme", "http")
                            .item(":method", "GET")
                            .item(":path", "/path")
                            .item(":authority", "localhost:8080")
                            .item("user-agent", "client 2")
                            .item("cache-control", "no-cache")
                            .item("prefer", "wait=10")
                            .item("if-none-match", etag)
                            .build()}

read "hello world"

read closed
