#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property newProxyAcceptRef ${nukleus:newRouteRef()} # external scope
property date ${http_cache:date()}
property etag ${http_cache:strongEtag()} #shared
property etag2 ${http_cache:strongEtag()} #shared

# Populate Cache

connect await ROUTED_PROXY
        "nukleus://http-cache/streams/source"
        option nukleus:route ${newProxyAcceptRef}
        option nukleus:transmission "half-duplex"
        option nukleus:authorization 0x0001_000000_000000L

write nukleus:begin.ext ${http:headers()
                              .item(":scheme", "http")
                              .item(":method", "GET")
                              .item(":path", "/path")
                              .item(":authority", "localhost:8080")
                              .item("authorization", "some-authorization-value")
                              .build()}

connected

write close

write notify REQUEST_1_MADE

read nukleus:begin.ext ${http:headers()
                             .item(":status", "200")
                             .item("content-length", "11")
                             .item("date", date)
                             .item("surrogate-control", "max-age=1+10, x-protected")
                             .item("etag", etag)
                             .item("cache-control", "stale-while-revalidate=10")
                             .build()}

read nukleus:transfer.ext ${http:headers()
                            .item(":scheme", "http")
                            .item(":method", "GET")
                            .item(":path", "/path")
                            .item(":authority", "localhost:8080")
                            .item("authorization", "some-authorization-value")
                            .item("cache-control", "no-cache")
                            .item("prefer", "wait=10")
                            .item("if-none-match", etag)
                            .build()}

read "response #1"

read closed

connect await REQUEST_1_MADE
        "nukleus://http-cache/streams/source"
        option nukleus:route ${newProxyAcceptRef}
        option nukleus:transmission "half-duplex"
        option nukleus:authorization 0x0002_000000_000000L

write nukleus:begin.ext ${http:headers()
                              .item(":scheme", "http")
                              .item(":method", "GET")
                              .item(":path", "/path")
                              .item(":authority", "localhost:8080")
                              .item("authorization", "some-authorization-value2")
                              .build()}

connected

write close

read nukleus:begin.ext ${http:headers()
                             .item(":status", "200")
                             .item("content-length", "11")
                             .item("date", date)
                             .item("surrogate-control", "max-age=1+10, x-protected")
                             .item("etag", etag2)
                             .item("cache-control", "stale-while-revalidate=10")
                             .build()}

read nukleus:transfer.ext ${http:headers()
                            .item(":scheme", "http")
                            .item(":method", "GET")
                            .item(":path", "/path")
                            .item(":authority", "localhost:8080")
                            .item("authorization", "some-authorization-value2")
                            .item("cache-control", "no-cache")
                            .item("prefer", "wait=10")
                            .item("if-none-match", etag2)
                            .build()}

read "response #2"

read closed
